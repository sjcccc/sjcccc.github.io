(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{383:function(s,t,a){"use strict";a.r(t);var n=a(46),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"ipairs与pairs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ipairs与pairs"}},[s._v("#")]),s._v(" ipairs与pairs")]),s._v(" "),a("p",[s._v("说到这两者首先是需要说明lua的泛型for"),a("br"),s._v("\n泛型for的格式如下")]),s._v(" "),a("div",{staticClass:"language-lua extra-class"},[a("pre",{pre:!0,attrs:{class:"language-lua"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" 参数列表 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" FunctionList "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n")])])]),a("p",[s._v("lua内部的实现")]),s._v(" "),a("div",{staticClass:"language-lua extra-class"},[a("pre",{pre:!0,attrs:{class:"language-lua"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("local")]),s._v(" func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" v2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" FunctionList\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("true")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("local")]),s._v(" s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("s2 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("....")]),s._v(" sn "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("v2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    _v2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s1\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" v2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nil")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n")])])]),a("p",[s._v("首先是函数参数列表FunctionList"),a("br"),s._v("\n这个列表只接受列表中的前三个值"),a("br"),s._v("\n1.迭代函数func"),a("br"),s._v("\n2.不可变状态v1"),a("br"),s._v("\n3.控制变量v2"),a("br"),s._v("\n然后是参数列表"),a("br"),s._v("\n参数列表为迭代函数执行的返回值即s1,s2")]),s._v(" "),a("p",[s._v("lua里提供了ipairs和pairs作为迭代器"),a("br"),s._v("\nipairs的实现如下")]),s._v(" "),a("div",{staticClass:"language-lua extra-class"},[a("pre",{pre:!0,attrs:{class:"language-lua"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("local")]),s._v(" iter "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("local")]),s._v(" v "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" v "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" v\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ipairs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" iter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n")])])]),a("p",[s._v("pairs的实现如下")]),s._v(" "),a("div",{staticClass:"language-lua extra-class"},[a("pre",{pre:!0,attrs:{class:"language-lua"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("pairs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nil")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n")])])]),a("p",[s._v("由他们的实现可以看出两者的区别"),a("br"),s._v("\n1.ipairs是会去判断对应下标是否在table中是否有对应的value，即形如{[1]=a,[2]=b,[4]=d},或{a,b,nil,d}这种均会在遇见nil时循环终止。"),a("br"),s._v("\n其中，对于table来说，其中的键值对并不会影响table中值的下标，"),a("br"),s._v('\nLocal t = {"a" , "b", x=1, "c"}，其中的t[3] = "c",所以对于t的ipairs循环是可以遍历出abc的，只是无法遍历键值对。'),a("br"),s._v("\n2.ipairs的优势是有序遍历，pairs的优势是能保证完整遍历"),a("br"),s._v("\n3.两者没有效率上的差异")])])}),[],!1,null,null,null);t.default=r.exports}}]);